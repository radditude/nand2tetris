// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                         // Format: ixxaccccccdddjjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    ////////////////
    // Instruction types
    ////////////////
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    ////////////////
    // A register //
    ////////////////

    // Choose if A register should get its input from the instruction input or from ALU ouput
    // based on whether or not we are executing a C instruction.
    Mux16(a=instruction, b=aluOut, sel=isCInstruction, out=aRegisterInput);
    // Load A register only if:
    // 1. we are executing an A instruction
    // 2. we are executing a C instruction and the correct d bit is selected
    Or(a=isAInstruction, b=instruction[5], out=loadARegister);
    // determine A register output as well as overall addressM output
    ARegister(in=aRegisterInput, load=loadARegister, out=aRegisterOut, out[0..14]=addressM);

    ////////////////
    // D register //
    ////////////////

    // Load D register if we have a C instruction and the correct d bit is selected.
    And(a=instruction[4], b=isCInstruction, out=loadDRegister);
    DRegister(in=aluOut, load=loadDRegister, out=dRegisterOut);

    /////////
    // ALU //
    /////////

    // Choose whether the ALU should receive input from the A register or the inM input.
    // The ALU always receives input from the D register.
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aRegisterOrInputM);
    ALU(
      x=dRegisterOut,
      y=aRegisterOrInputM,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=aluOut,
      zr=aluOutIsZero,
      ng=aluOutIsNegative
    );

    /////////////////////////
    // Determine outM, pc, //
    // and writeM  outputs //
    /////////////////////////

    // Wire ALU output into the overall outM output.
    And16(a=aluOut, b=aluOut, out=outM);

    // The writeM bit should only be 1 if we are executing a C instruction
    // and the correct d bit is selected.
    And(a=isCInstruction, b=instruction[3], out=writeM);

    // The program counter increments by default, but can be overridden by
    // 1. the reset input
    // 2. the results of the jump calculations below.
    PC(in=aRegisterOut, load=jumpToA, inc=true, reset=reset, out=pcOut, out[0..14]=pc);

    ///////////////////
    // Jump handling //
    ///////////////////

    // Output is positive
    Not(in=aluOutIsZero, out=notZero);
    Not(in=aluOutIsNegative, out=notNegative);
    And(a=notZero, b=notNegative, out=aluOutIsPositive);

    // Jump if output is zero
    And(a=instruction[1], b=aluOutIsZero, out=jeq);
    // Jump if output is negative
    And(a=instruction[2], b=aluOutIsNegative, out=jlt);
    // Jump if output is positive
    And(a=instruction[0], b=aluOutIsPositive, out=jgt);
    // Should we jump?
    Or(a=jeq, b=jlt, out=jeqVsJlt);
    Or(a=jeqVsJlt, b=jgt, out=jump);
    And(a=jump, b=isCInstruction, out=jumpToA);
}
